---
import { marked } from 'marked';

// Configure marked options
marked.setOptions({
  breaks: true,        // Convert \n to <br>
  gfm: true,          // GitHub Flavored Markdown
  pedantic: false,    // Don't be overly strict
});

type PostEntry = {
	slug?: string;
	title?: string;
	date?: string;
	summary?: string;
	path?: string;
	url?: string;
};

const manifestUrl: string =
	(import.meta.env as any).PUBLIC_BLOG_MANIFEST_URL ?? 'https://bethel-air-blogs.s3.amazonaws.com/blogs/index.json';
const baseUrl: string =
	(import.meta.env as any).PUBLIC_BLOG_BASE_URL ?? 'https://bethel-air-blogs.s3.amazonaws.com/';

function stripFrontmatter(src: string): string {
	if (src.startsWith('---')) {
		const end = src.indexOf('\n---', 3);
		if (end !== -1) return src.slice(end + 4);
	}
	return src;
}

function deriveTitleFromFrontmatter(src: string): string | null {
	const m = src.match(/^---[\s\S]*?\btitle:\s*["']?(.+?)["']?[\r\n]/m);
	return m ? m[1].trim() : null;
}

function derivePreview(markdown: string, summary?: string): string {
	if (summary && summary.trim().length) return summary.trim();
	const body = stripFrontmatter(markdown).trim();
	// First paragraph
	const firstPara = body.split(/\n\s*\n/)[0] || '';
	const words = firstPara.replace(/\r/g, '').split(/\s+/).filter(Boolean);
	const trimmed = words.slice(0, 60).join(' ');
	return trimmed + (words.length > 60 ? 'â€¦' : '');
}

function formatDate(dateString: string): string {
	try {
		const date = new Date(dateString);
		return date.toLocaleDateString('en-US', { 
			year: 'numeric', 
			month: 'short', 
			day: 'numeric' 
		});
	} catch {
		return dateString;
	}
}

async function fetchManifest(): Promise<{ posts: PostEntry[] }> {
	const res = await fetch(manifestUrl);
	if (!res.ok) throw new Error(`Failed to fetch manifest: ${res.status}`);
	return res.json();
}

async function buildItems() {
	const { posts = [] } = await fetchManifest();

	// Find "A Message from Todd" post to pin it first
	const toddMessagePost = posts.find(post => 
		post.slug === 'a-message-from-todd' || 
		post.title === 'A Message from Todd'
	);

	// Get all other posts and sort by date descending (newest first)
	const otherPosts = posts.filter(post => 
		post.slug !== 'a-message-from-todd' && 
		post.title !== 'A Message from Todd'
	);
	
	otherPosts.sort((a, b) => {
		const da = a.date ? new Date(a.date).getTime() : 0;
		const db = b.date ? new Date(b.date).getTime() : 0;
		return db - da;
	});

	// Combine: latest 4 other posts, with Todd's message pinned to the 5th slot
	const orderedPosts = otherPosts.slice(-4).reverse();
	if (toddMessagePost) {
		orderedPosts.push(toddMessagePost);
	}

	const htmlItems = await Promise.all(
        orderedPosts.map(async (p) => {
            const url = p.url ?? new URL(p.path ?? '', baseUrl).toString();
            const mdText = await fetch(url).then((r) => r.text());

            const strippedMd = stripFrontmatter(mdText);

            const title = p.title ?? deriveTitleFromFrontmatter(mdText) ?? p.slug ?? 'Untitled';
            const preview = derivePreview(mdText, p.summary);
            const html = marked.parse(strippedMd) as string;
            const formattedDate = p.date ? formatDate(p.date) : '';
            
            return { title, preview, html, date: formattedDate };
        })
    );

	return htmlItems;
}

const accordionItems = await buildItems();
---

{/* Section remains unconstrained */}
<section id="blog" class="py-8">
	{/* Update max-width on the wrapper div */}
	<div class="max-w-screen-2xl mx-auto px-4 sm:px-6 lg:px-8">
		{/* Move existing content inside the wrapper */}
		<div class="peace-chat-container mb-8"> {/* Added margin-bottom */}
			<div class="chat-image avatar placeholder">
				<div class="peace-chat-avatar-placeholder">
					<span>PH</span>
				</div>
			</div>
			<div class="peace-chat-content">
				<div class="peace-chat-header">
					PeaceHouston
					<time>1:33PM</time>
				</div>
				<div class="peace-chat-bubble peace-chat-bubble-start">
					We've written a few thoughts below with you in mind...
				</div>
				<div class="peace-chat-footer">
					Delivered
				</div>
			</div>
		</div>

		<div class="space-y-6 accordion-container">
			{accordionItems.map((item) => (
				<div class="collapse collapse-arrow join-item border-base-300 border accordion-item">
					<input type="checkbox" name="thought-accordion" />
					<div class="collapse-title accordion-title">
						<div class="accordion-title-content">
							<div class="accordion-title-text text-xl font-semibold">{item.title}</div>
							{item.date && <div class="accordion-date-text">{item.date}</div>}
						</div>
						{item.preview && <div class="accordion-preview-text">{item.preview}</div>}
					</div>
					<div class="collapse-content accordion-content">
						<div class="markdown-content" set:html={item.html}></div>
					</div>
				</div>
			))}
		</div>
	</div> 
</section>

<script is:inline>
	const accordions = document.querySelectorAll('input[name="thought-accordion"]');

	accordions.forEach((accordion) => {
		// Use 'click' event for more immediate response
		accordion.addEventListener('click', (event) => {
			const currentAccordion = event.currentTarget;

			// If the clicked accordion is now checked, uncheck all others
			if (currentAccordion.checked) {
				accordions.forEach((otherAccordion) => {
					if (otherAccordion !== currentAccordion) {
						otherAccordion.checked = false;
					}
				});
			}
		});
	});
</script>

<style>
	/* Import font */
	@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

	#thoughts-section {
		font-family: 'Inter', sans-serif;
		/* Removed padding-left/right, handled by Layout */
	}

	/* --- Removed Chat Bubble Styles (Now in globals.css) --- */

	/* --- Accordion Styling (Remains the same, scoped locally) --- */
	.accordion-container {
		filter: drop-shadow(0px 4px 21.9px rgba(0, 0, 0, 0.13));
	}

	.accordion-item {
		border: none;
		border-radius: 16px;
		background: linear-gradient(90deg, color(display-p3 0.780 0.867 0.910 / 0.51) 0%, color(display-p3 0.224 0.388 0.741 / 0.51) 100%), color(display-p3 0.298 0.686 0.314);
		background: linear-gradient(90deg, rgba(193, 222, 233, 0.51) 0%, rgba(41, 100, 196, 0.51) 100%), #4CAF50; /* Fallback */
		padding: 1px;
		transition: transform 0.2s ease-in-out;
	}

	.accordion-item:hover {
		transform: scale(1.015);
	}

	 .accordion-item .collapse-title,
	 .accordion-item .collapse-content {
		 background: transparent;
		 color: #E5E6E6;
	}

	/* Arrow color - Attempting override */
	.accordion-item .collapse-title:after {
		 --tw-bg-opacity: 1;
		 background-color: #E5E6E6 !important; /* Override DaisyUI theme variable */
	}

	.accordion-title {
		padding: 16px;
		min-height: 60px;
		color: #E5E6E6;
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		justify-content: center;
	}

	.accordion-title-content {
		display: flex;
		justify-content: space-between;
		align-items: flex-start;
		width: 100%;
		margin-bottom: 4px;
	}

	.accordion-title-text {
		line-height: 1.4;
		flex: 1;
	}

	.accordion-date-text {
		font-size: 14px;
		font-weight: 400;
		color: #B0B0B0;
		margin-left: 16px;
		margin-right: 32px;
		flex-shrink: 0;
	}

	.accordion-preview-text {
		font-size: 16px;
		font-weight: 400;
		line-height: 1.5;
		color: #E5E6E6;
		margin-top: 4px;
		max-width: 90%;
	}

	/* Hide preview text when accordion is open */
	.accordion-item input:checked ~ .collapse-title .accordion-preview-text {
		display: none;
	}

	.accordion-content {
		padding: 0px 16px 16px;
		color: #E5E6E6;
	}

	/* 
	 * Styles for dynamically generated markdown content.
	 * We use the :global() modifier to prevent Astro from scoping these styles.
	 * A wrapping .markdown-content class is used to scope them back to only the rendered markdown.
	 */
	.markdown-content :global(p) {
		font-size: 16px;
		font-weight: 400;
		line-height: 28px;
		margin-bottom: 1em;
		color: #E5E6E6;
	}

	.markdown-content :global(h1),
	.markdown-content :global(h2),
	.markdown-content :global(h3),
	.markdown-content :global(h4),
	.markdown-content :global(h5),
	.markdown-content :global(h6) {
		font-weight: 600;
		line-height: 1.6;
		margin-top: 1.5em;
		margin-bottom: 0.75em;
		color: #E5E6E6;
	}

	.markdown-content :global(h1) { font-size: 1.875rem; }
	.markdown-content :global(h2) { font-size: 1.5rem; }
	.markdown-content :global(h3) { font-size: 1.25rem; }
	.markdown-content :global(h4) { font-size: 1.125rem; }

	.markdown-content :global(strong) {
		font-weight: 600;
		color: #E5E6E6;
	}

	.markdown-content :global(em) {
		font-style: italic;
	}

	.markdown-content :global(ul),
	.markdown-content :global(ol) {
		margin: 1em 0;
		padding-left: 1.5em;
	}

	.markdown-content :global(li) {
		margin-bottom: 0.5em;
		line-height: 1.6;
	}

	.markdown-content :global(blockquote) {
		border-left: 4px solid #4CAF50;
		padding-left: 1rem;
		margin: 1.5em 0;
		font-style: italic;
		color: #B0B0B0;
	}

	.markdown-content :global(code) {
		background-color: rgba(255, 255, 255, 0.1);
		padding: 0.2em 0.4em;
		border-radius: 4px;
		font-family: 'Courier New', monospace;
		font-size: 0.9em;
	}

	.markdown-content :global(pre) {
		background-color: rgba(255, 255, 255, 0.1);
		padding: 1rem;
		border-radius: 8px;
		overflow-x: auto;
		margin: 1em 0;
	}

	.markdown-content :global(a) {
		color: #81C784;
		text-decoration: underline;
	}

	.markdown-content :global(a:hover) {
		color: #A5D6A7;
	}
</style>